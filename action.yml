name: "action-composite-docker-build-push"
description: "build with proper dockerfile and push docker image to private repo"
inputs:
  container_registry_server:
    description: “Docker private registry url”
    required: true
  container_registry_login:
    description: “Login for image registry”
    required: true
  container_registry_password:
    description: “Password for image registry (token for scw)”
    required: true
  base_image:
    description: “base image for docker build (override default ARG from dockerfile)”
    default: "openjdk:8-jre-alpine"
    required: false
  gradle_build_folder:
    description: “Folder where libs are build for gradle”
    required: true
  web_folder:
    description: “Folder where libs are build for angular”
    required: true
  BATCH:
    description: "Set to true to create batch docker image"
    required: false
  image_name:
    description: "Set custom image name"
    required: false
  dockerfile_type:
    description: "Provide type of dockerfile to use, service or webserver"
    required: true
    default: "service"
outputs:
  docker_image_name:
    description: "Docker image name with short sha for deployment"
    value: ${{ steps.prep.outputs.tag_sha }}
runs:
  using: "composite"
  steps:
    - name: Prepare
      id: prep
      run: |
        IMAGE_NAME=${{ inputs.container_registry_server }}/${{ inputs.image_name || env.IMAGE_NAME }}
        VERSION=latest
        COMMIT_SHA=${{ github.event.inputs.commit_sha || github.sha }}
        SHORTREF=${COMMIT_SHA::8}
        # Set proper dockerfile in function of type / branch / batch
        if [[ ${{ inputs.dockerfile_type }} == 'service' ]]; then
          DOCKERFILE=Dockerfile
          if [[ ${GITHUB_REF} == 'refs/heads/ops' ]]; then
            IMAGE_NAME=${IMAGE_NAME}-ops
            DOCKERFILE=${DOCKERFILE}-ops
          fi
          if [[ -n "${{ inputs.BATCH }}" ]]; then
            IMAGE_NAME=${IMAGE_NAME}-batch
            DOCKERFILE=${DOCKERFILE}-batch
          fi
        elif [[ ${{ inputs.dockerfile_type }} == 'webserver' ]]; then
          DOCKERFILE=Dockerfile-nginx
        fi
        TAG_SHA="${IMAGE_NAME}:${SHORTREF}"
        TAGS="${IMAGE_NAME}:${VERSION},${IMAGE_NAME}:${SHORTREF}"
        echo "tag_sha=${TAG_SHA}" >> $GITHUB_OUTPUT
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "dockerfile=${DOCKERFILE}" >> $GITHUB_OUTPUT
      shell: bash
    - name: check output
      run: |
        echo "The dockerfile name is ${{ steps.prep.outputs.dockerfile }}"
        echo "The image name is ${{ steps.prep.outputs.image_name }}"
        echo "The tag with short sha is ${{ steps.prep.outputs.tag_sha }}"
        echo "The tags are ${{ steps.prep.outputs.tags }}"
      shell: bash

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.container_registry_server }}
        username: ${{ inputs.container_registry_login }}
        password: ${{ inputs.container_registry_password }}

    # service type
    - name: copy dockerfile, script and libs for service
      if: ${{ !inputs.BATCH && inputs.dockerfile_type == 'service' }}
      run: |
        mkdir -p build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/service \
          && cp ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }} build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/service \
          && cp ${{ github.action_path }}/install_packages.sh build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/service \
          && cp ${{ inputs.gradle_build_folder }}/build/libs/* build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/service
      shell: bash

    - name: copy dockerfile, script and libs for batch
      if: ${{ inputs.BATCH && inputs.dockerfile_type == 'service' }}
      run: |
        mkdir -p build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/batch \
          && cp ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }} build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/batch \
          && cp ${{ github.action_path }}/install_packages.sh build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/batch \
          && cp ${{ inputs.gradle_build_folder }}/build/libs/* build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/batch
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64

    - name: Build service image
      if: ${{ !inputs.BATCH && inputs.dockerfile_type == 'service' }}
      uses: docker/build-push-action@v5
      with:
        context: build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/service
        file: ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }}
        build-args: "BASE_IMAGE=${{ inputs.base_image }}"
        push: true
        tags: ${{ steps.prep.outputs.tags }}
        platforms: linux/amd64

    - name: Build batch image
      if: ${{ inputs.BATCH && inputs.dockerfile_type == 'service' }}
      uses: docker/build-push-action@v5
      with:
        context: build/docker/${{ inputs.image_name || env.IMAGE_NAME }}/batch
        file: ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }}
        build-args: "BASE_IMAGE=${{ inputs.base_image }}"
        push: true
        tags: ${{ steps.prep.outputs.tags }}
        platforms: linux/amd64

    # Copy the file in the docker context
    - name: nginx config for webserver webserver image build
      if: inputs.dockerfile_type == 'webserver'
      run: cp ${{ github.action_path }}/webserver-nginx.conf dist
      shell: bash

    - name: Build webserver image
      if: inputs.dockerfile_type == 'webserver'
      uses: docker/build-push-action@v5
      with:
        context: dist
        file: ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }}
        build-args: |
          "BASE_IMAGE=${{ inputs.base_image }}"
          "WEB_DIR=${{ inputs.web_folder }}"
          "CONF_PATH=webserver-nginx.conf"
        push: true
        tags: ${{ steps.prep.outputs.tags }}
        platforms: linux/amd64
