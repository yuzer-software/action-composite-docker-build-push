name: 'action-composite-docker-build-push'
description: 'build with proper dockerfile and push docker image to private repo'
inputs:
  container_registry_server:
    description: “Docker private registry url”
    required: true
  container_registry_login:
    description: “Login for image registry”
    required: true
  container_registry_password:
    description: “Password for image registry (token for scw)”
    required: true
  base_image:
    description: “base image for docker build (override default ARG from dockerfile)”
    default: "openjdk:8-jre-alpine"
    required: false
  gradle_build_folder:
    description: “Folder where libs are build”
    required: true
  BATCH:  
    description: "Set to true to create batch docker image"
    required: false
outputs:
  docker_image_name:
    description: "Docker image name with short sha for deployment"
    value: ${{ steps.prep.outputs.tag_sha }}
runs:
  using: "composite"
  steps:
    - name: Prepare
      id: prep
      run: |
        IMAGE_NAME=${{ inputs.container_registry_server }}/${{ env.IMAGE_NAME }}
        VERSION=latest
        SHORTREF=${GITHUB_SHA::8}
        DOCKERFILE=Dockerfile
        if [[ ${GITHUB_REF} == 'refs/heads/ops' ]]; then
          IMAGE_NAME=${IMAGE_NAME}-ops
          DOCKERFILE=${DOCKERFILE}-ops
        fi
        if [[ -n "${{ inputs.BATCH }}" ]]; then
          IMAGE_NAME=${IMAGE_NAME}-batch
          DOCKERFILE=${DOCKERFILE}-batch
        fi
        TAG_SHA="${IMAGE_NAME}:${SHORTREF}"
        TAGS="${IMAGE_NAME}:${VERSION},${IMAGE_NAME}:${SHORTREF}"
        echo ::set-output name=tag_sha::${TAG_SHA}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=image_name::${IMAGE_NAME}
        echo ::set-output name=dockerfile::${DOCKERFILE}
      shell: bash
    - name: check output
      run: |
        echo "The dockerfile name is ${{ steps.prep.outputs.dockerfile }}"
        echo "The image name is ${{ steps.prep.outputs.image_name }}"
        echo "The tag with short sha is ${{ steps.prep.outputs.tag_sha }}"        
        echo "The tags are ${{ steps.prep.outputs.tags }}"
      shell: bash

    - name: copy dockerfile, script and libs for service
      if: '!inputs.BATCH'
      run: |
        mkdir -p build/docker/service \
          && cp ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }} build/docker/service \
          && cp ${{ github.action_path }}/install_packages.sh build/docker/service \
          && cp ${{ inputs.gradle_build_folder }}/build/libs/* build/docker/service
      shell: bash

    - name: copy dockerfile, script and libs for batch
      if: 'inputs.BATCH'
      run: |
        mkdir -p build/docker/batch \
          && cp ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }} build/docker/batch \
          && cp ${{ github.action_path }}/install_packages.sh build/docker/batch \
          && cp ${{ inputs.gradle_build_folder }}/build/libs/* build/docker/batch
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.container_registry_server }}
        username: ${{ inputs.container_registry_login }}
        password: ${{ inputs.container_registry_password }}
      
    - name: Build service image
      if: '!inputs.BATCH'
      uses: docker/build-push-action@v2
      with:
        context: build/docker/service
        file: ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }}
        build-args: "BASE_IMAGE=${{ inputs.base_image }}"
        push: true
        tags: ${{ steps.prep.outputs.tags }}

    - name: Build batch image
      if: 'inputs.BATCH'
      uses: docker/build-push-action@v2
      with:
        context: build/docker/batch
        file: ${{ github.action_path }}/${{ steps.prep.outputs.dockerfile }}
        build-args: "BASE_IMAGE=${{ inputs.base_image }}"
        push: true
        tags: ${{ steps.prep.outputs.tags }}